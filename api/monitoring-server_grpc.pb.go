// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	types "github.com/chez-shanpu/acar/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MonitoringServerClient is the client API for MonitoringServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringServerClient interface {
	GetNodes(ctx context.Context, in *GetNodesParams, opts ...grpc.CallOption) (*NodesInfo, error)
	RegisterNodes(ctx context.Context, in *NodesInfo, opts ...grpc.CallOption) (*types.Result, error)
}

type monitoringServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServerClient(cc grpc.ClientConnInterface) MonitoringServerClient {
	return &monitoringServerClient{cc}
}

func (c *monitoringServerClient) GetNodes(ctx context.Context, in *GetNodesParams, opts ...grpc.CallOption) (*NodesInfo, error) {
	out := new(NodesInfo)
	err := c.cc.Invoke(ctx, "/acar.MonitoringServer/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServerClient) RegisterNodes(ctx context.Context, in *NodesInfo, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/acar.MonitoringServer/RegisterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServerServer is the server API for MonitoringServer service.
// All implementations must embed UnimplementedMonitoringServerServer
// for forward compatibility
type MonitoringServerServer interface {
	GetNodes(context.Context, *GetNodesParams) (*NodesInfo, error)
	RegisterNodes(context.Context, *NodesInfo) (*types.Result, error)
	mustEmbedUnimplementedMonitoringServerServer()
}

// UnimplementedMonitoringServerServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringServerServer struct {
}

func (UnimplementedMonitoringServerServer) GetNodes(context.Context, *GetNodesParams) (*NodesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedMonitoringServerServer) RegisterNodes(context.Context, *NodesInfo) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodes not implemented")
}
func (UnimplementedMonitoringServerServer) mustEmbedUnimplementedMonitoringServerServer() {}

// UnsafeMonitoringServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServerServer will
// result in compilation errors.
type UnsafeMonitoringServerServer interface {
	mustEmbedUnimplementedMonitoringServerServer()
}

func RegisterMonitoringServerServer(s grpc.ServiceRegistrar, srv MonitoringServerServer) {
	s.RegisterService(&_MonitoringServer_serviceDesc, srv)
}

func _MonitoringServer_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServerServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acar.MonitoringServer/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServerServer).GetNodes(ctx, req.(*GetNodesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringServer_RegisterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServerServer).RegisterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acar.MonitoringServer/RegisterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServerServer).RegisterNodes(ctx, req.(*NodesInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acar.MonitoringServer",
	HandlerType: (*MonitoringServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _MonitoringServer_GetNodes_Handler,
		},
		{
			MethodName: "RegisterNodes",
			Handler:    _MonitoringServer_RegisterNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring-server.proto",
}
